//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-27506705
// Cuda compilation tools, release 10.2, V10.2.89
// Based on LLVM 3.4svn
//

.version 6.5
.target sm_61
.address_size 64

	// .globl	__raygen__RayAllocator
.const .align 8 .b8 paras[32];

.visible .entry __raygen__RayAllocator(

)
{
	.local .align 4 .b8 	__local_depot0[12];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .f32 	%f<50>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<12>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd2, %SP, 0;
	add.u64 	%rd3, %SPL, 0;
	// inline asm
	call (%r1), _optix_get_launch_index_x, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_launch_index_y, ();
	// inline asm
	mov.u64 	%rd4, 0;
	st.local.u32 	[%rd3+4], %rd4;
	st.local.u32 	[%rd3], %rd4;
	mov.u32 	%r10, 0;
	st.local.u32 	[%rd3+8], %r10;
	cvt.rn.f32.u32	%f10, %r1;
	cvt.rn.f32.u32	%f11, %r2;
	ld.const.v2.u32 	{%r13, %r14}, [paras+24];
	mov.u32 	%r9, 1;
	cvt.rn.f32.u32	%f12, %r13;
	cvt.rn.f32.u32	%f13, %r14;
	mul.f32 	%f14, %f12, 0f3F000000;
	mul.f32 	%f15, %f13, 0f3F000000;
	sub.f32 	%f16, %f10, %f14;
	sub.f32 	%f17, %f11, %f15;
	ld.const.u64 	%rd5, [paras+16];
	cvta.to.global.u64 	%rd6, %rd5;
	ld.global.f32 	%f18, [%rd6+12];
	ld.global.f32 	%f19, [%rd6+28];
	add.f32 	%f20, %f16, %f18;
	add.f32 	%f21, %f17, %f19;
	ld.global.f32 	%f22, [%rd6+60];
	mul.f32 	%f23, %f21, %f21;
	fma.rn.f32 	%f24, %f20, %f20, %f23;
	fma.rn.f32 	%f25, %f22, %f22, %f24;
	sqrt.rn.f32 	%f26, %f25;
	rcp.rn.f32 	%f27, %f26;
	mul.f32 	%f28, %f20, %f27;
	mul.f32 	%f29, %f21, %f27;
	mul.f32 	%f30, %f22, %f27;
	ld.global.f32 	%f31, [%rd6];
	ld.global.f32 	%f32, [%rd6+4];
	mul.f32 	%f33, %f29, %f32;
	fma.rn.f32 	%f34, %f28, %f31, %f33;
	ld.global.f32 	%f35, [%rd6+8];
	fma.rn.f32 	%f4, %f30, %f35, %f34;
	ld.global.f32 	%f36, [%rd6+16];
	ld.global.f32 	%f37, [%rd6+20];
	mul.f32 	%f38, %f29, %f37;
	fma.rn.f32 	%f39, %f28, %f36, %f38;
	ld.global.f32 	%f40, [%rd6+24];
	fma.rn.f32 	%f5, %f30, %f40, %f39;
	ld.global.f32 	%f41, [%rd6+32];
	ld.global.f32 	%f42, [%rd6+36];
	mul.f32 	%f43, %f29, %f42;
	fma.rn.f32 	%f44, %f28, %f41, %f43;
	ld.global.f32 	%f45, [%rd6+40];
	fma.rn.f32 	%f6, %f30, %f45, %f44;
	shr.u64 	%rd7, %rd2, 32;
	cvt.u32.u64	%r11, %rd7;
	cvt.u32.u64	%r12, %rd2;
	ld.const.u64 	%rd1, [paras+8];
	ld.global.f32 	%f1, [%rd6+48];
	ld.global.f32 	%f2, [%rd6+52];
	ld.global.f32 	%f3, [%rd6+56];
	mov.f32 	%f7, 0f3A83126F;
	mov.f32 	%f8, 0f5A0E1BCA;
	mov.f32 	%f9, 0f00000000;
	// inline asm
	call (%r4, %r5), _optix_trace_2, (%rd1, %f1, %f2, %f3, %f4, %f5, %f6, %f7, %f8, %f9, %r9, %r10, %r10, %r9, %r10, %r11, %r12);
	// inline asm
	ld.const.u64 	%rd8, [paras];
	cvta.to.global.u64 	%rd9, %rd8;
	mad.lo.s32 	%r17, %r13, %r2, %r1;
	mul.wide.u32 	%rd10, %r17, 16;
	add.s64 	%rd11, %rd9, %rd10;
	ld.local.f32 	%f46, [%rd3+8];
	ld.local.f32 	%f47, [%rd3+4];
	ld.local.f32 	%f48, [%rd3];
	mov.f32 	%f49, 0f3F800000;
	st.global.v4.f32 	[%rd11], {%f48, %f47, %f46, %f49};
	ret;
}

	// .globl	__closesthit__Ahh
.visible .entry __closesthit__Ahh(

)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<46>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<8>;


	// inline asm
	call (%rd2), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r1), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd3, [%rd2];
	mul.wide.s32 	%rd4, %r1, 12;
	add.s64 	%rd5, %rd3, %rd4;
	ld.f32 	%f10, [%rd5];
	ld.f32 	%f11, [%rd5+4];
	ld.f32 	%f12, [%rd5+8];
	// inline asm
	call (%r2), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r3), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd6, %r2;
	cvt.u64.u32	%rd7, %r3;
	bfi.b64 	%rd1, %rd6, %rd7, 32, 32;
	add.f32 	%f13, %f10, 0f3F800000;
	add.f32 	%f14, %f11, 0f3F800000;
	add.f32 	%f15, %f12, 0f3F800000;
	mul.f32 	%f16, %f14, %f14;
	fma.rn.f32 	%f17, %f13, %f13, %f16;
	fma.rn.f32 	%f18, %f15, %f15, %f17;
	sqrt.rn.f32 	%f19, %f18;
	rcp.rn.f32 	%f20, %f19;
	mul.f32 	%f1, %f13, %f20;
	mul.f32 	%f2, %f14, %f20;
	mul.f32 	%f3, %f15, %f20;
	// inline asm
	call (%f9), _optix_get_ray_tmax, ();
	// inline asm
	mov.f32 	%f21, 0f41A00000;
	div.rn.f32 	%f4, %f21, %f9;
	abs.f32 	%f5, %f4;
	setp.ltu.f32	%p1, %f5, 0f3F19999A;
	@%p1 bra 	BB1_2;
	bra.uni 	BB1_1;

BB1_2:
	mul.f32 	%f29, %f4, %f4;
	mov.f32 	%f30, 0fBD563CAE;
	mov.f32 	%f31, 0f3C80F082;
	fma.rn.f32 	%f32, %f31, %f29, %f30;
	mov.f32 	%f33, 0f3E085941;
	fma.rn.f32 	%f34, %f32, %f29, %f33;
	mov.f32 	%f35, 0fBEAAA9ED;
	fma.rn.f32 	%f36, %f34, %f29, %f35;
	mov.f32 	%f37, 0f00000000;
	fma.rn.f32 	%f38, %f36, %f29, %f37;
	fma.rn.f32 	%f45, %f38, %f4, %f4;
	bra.uni 	BB1_3;

BB1_1:
	mul.f32 	%f24, %f5, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f25, %f24;
	add.f32 	%f23, %f25, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f22,%f23;
	// inline asm
	mov.f32 	%f26, 0f3F800000;
	mov.f32 	%f27, 0fC0000000;
	fma.rn.f32 	%f28, %f22, %f27, %f26;
	mov.b32 	 %r4, %f28;
	setp.ltu.f32	%p2, %f5, 0f41102CB4;
	selp.b32	%r5, %r4, 1065353216, %p2;
	mov.b32 	 %r6, %f4;
	and.b32  	%r7, %r6, -2147483648;
	or.b32  	%r8, %r5, %r7;
	mov.b32 	 %f45, %r8;

BB1_3:
	mul.f32 	%f39, %f1, 0f3F000000;
	mul.f32 	%f40, %f39, %f45;
	st.f32 	[%rd1], %f40;
	mul.f32 	%f41, %f2, 0f3F000000;
	mul.f32 	%f42, %f41, %f45;
	st.f32 	[%rd1+4], %f42;
	mul.f32 	%f43, %f3, 0f3F000000;
	mul.f32 	%f44, %f43, %f45;
	st.f32 	[%rd1+8], %f44;
	ret;
}

	// .globl	__miss__Ahh
.visible .entry __miss__Ahh(

)
{



	ret;
}


